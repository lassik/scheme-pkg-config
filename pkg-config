#! /usr/bin/env upscheme

(import (upscheme 2019 unstable))

;;

(define (append-map fn lst)
  (let loop ((lst lst) (acc '()))
    (if (null? lst) acc (loop (cdr lst) (append acc (fn (car lst)))))))

(define path-list-separator ":")

(define (split-path-list env)
  (if env (string-split env path-list-separator) #f))

(define (path-join . paths)
  (if (null? paths) ""
      (let loop ((paths (cdr paths)) (acc (car paths)))
        (if (null? paths) acc
            (loop (cdr paths) (string-append acc "/" (car paths)))))))

;;

(define default-pkg-config-path
  '("/usr/lib/pkgconfig"
    "/usr/share/pkgconfig"
    "/usr/local/lib/pkgconfig"
    "/usr/local/share/pkgconfig"))

(define (get-full-pkg-config-path)
  (append (let ((path (split-path-list
                       (get-environment-variable "PKG_CONFIG_PATH"))))
            (or path '()))
          default-pkg-config-path))

(define (list-all-pc-files)
  (append-map (λ (dir) (map (λ (file) (path-join dir file))
                            (directory-names dir)))
              (filter file-exists? (get-full-pkg-config-path))))

(define (trim-whitespace string)
  (string.trim string *whitespace* *whitespace*))

(define (last-char string)
  (string-ref string (- (string-length string) 1)))

(define (split-line key line pivot)
  (values
   key
   (trim-whitespace (substring line 0 pivot))
   (trim-whitespace (substring line (+ pivot 1) (string-length line)))))

(define (parse-line read-line)
  (let loop ((line (read-line)))
    (if (eof-object? line)
        (values #f #f #f)
        (let ((line (trim-whitespace line)) (pivot #f))
          (cond ((= 0 (string-length line))
                 (loop (read-line)))
                ((char=? #\# (string-ref line 0))
                 (loop (read-line)))
                ((char=? #\\ (last-char line))
                 (loop (string-append
                        line " " (let ((line (read-line)))
                                   (if (eof-object? line) "" line)))))
                ((set! pivot (string.find line #\:))
                 (split-line 'key line pivot))
                ((set! pivot (string.find line #\=))
                 (split-line 'var line pivot))
                (else
                 (error (string-append "huh: " line))))))))

(define (parse-lines read-line)
  (let loop ((keys '()) (vars '()))
    (receive (type name value) (parse-line read-line)
      (case type
        ((#f)  (values keys vars))
        ((key) (loop (append keys (list (cons name value))) vars))
        ((var) (loop keys (append vars (list (cons name value)))))
        (else  (error "huh"))))))

(define (list-reader lines)
  (lambda ()
    (if (null? lines) (eof-object)
        (let ((line (car lines)))
          (set! lines (cdr lines))
          line))))

(define (dump-pc-file filename)
  (newline)
  (writeln filename)
  (newline)
  (receive (keys vars)
      (parse-lines (list-reader (io.readlines (file filename))))
    (for-each writeln keys)
    (newline)
    (for-each writeln vars)))

(for-each dump-pc-file (list-all-pc-files))
