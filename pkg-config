#! /usr/bin/env upscheme

(import (upscheme 2019 unstable))

;;

(define (append-map fn lst)
  (let loop ((lst lst) (acc '()))
    (if (null? lst) acc (loop (cdr lst) (append acc (fn (car lst)))))))

(define path-list-separator ":")

(define (split-path-list env)
  (if env (string-split env path-list-separator) #f))

(define (path-join . paths)
  (if (null? paths) ""
      (let loop ((paths (cdr paths)) (acc (car paths)))
        (if (null? paths) acc
            (loop (cdr paths) (string-append acc "/" (car paths)))))))

;;

(define default-pkg-config-path
  '("/usr/lib/pkgconfig"
    "/usr/share/pkgconfig"
    "/usr/local/lib/pkgconfig"
    "/usr/local/share/pkgconfig"))

(define (get-full-pkg-config-path)
  (append (let ((path (split-path-list
                       (get-environment-variable "PKG_CONFIG_PATH"))))
            (or path '()))
          default-pkg-config-path))

(define (list-all-pc-files)
  (append-map (λ (dir) (map (λ (file) (path-join dir file))
                            (directory-names dir)))
              (filter file-exists? (get-full-pkg-config-path))))

(define (trim-whitespace string)
  (string.trim string *whitespace* *whitespace*))

(define (condense-whitespace string)
  (let loop ((i 0) (was-white? #f) (chars '()))
    (if (= i (string-length string))
        (list->string (reverse chars))
        (let* ((char (string-ref string i))
               (white? (string.find *whitespace* char)))
          (cond (white?
                 (loop (+ i 1) #t chars))
                ((or (not was-white?) (null? chars))
                 (loop (+ i 1) #f (cons char chars)))
                (else
                 (loop (+ i 1) #f (cons char (cons #\space chars)))))))))

(define (last-char string)
  (string-ref string (- (string-length string) 1)))

(define (split-line key line pivot)
  (values
   key
   (condense-whitespace (substring line 0 pivot))
   (condense-whitespace (substring line (+ pivot 1) (string-length line)))))

(define (parse-line read-line)
  (let loop ((line (read-line)))
    (if (eof-object? line)
        (values #f #f #f)
        (let ((line (trim-whitespace line)) (pivot #f))
          (cond ((= 0 (string-length line))
                 (loop (read-line)))
                ((char=? #\# (string-ref line 0))
                 (loop (read-line)))
                ((char=? #\\ (last-char line))
                 (loop (string-append
                        (substring line 0 (- (string-length line) 1))
                        " " (let ((line (read-line)))
                              (if (eof-object? line) "" line)))))
                ((set! pivot (string.find line #\=))
                 (split-line 'var line pivot))
                ((set! pivot (string.find line #\:))
                 (split-line 'key line pivot))
                (else
                 (error (string-append "huh: " line))))))))

(define (parse-lines read-line)
  (let loop ((keys '()) (vars '()))
    (receive (type name value) (parse-line read-line)
      (case type
        ((#f)  (values keys vars))
        ((key) (loop (append keys (list (cons name value))) vars))
        ((var) (loop keys (append vars (list (cons name value)))))
        (else  (error "huh"))))))

(define (list-reader lines)
  (lambda ()
    (if (null? lines) (eof-object)
        (let ((line (car lines)))
          (set! lines (cdr lines))
          line))))

(define (expand-vars s vars)
  (let rec ((s s) (visited '()))
    (let ((n (string-length s)))
      (let loop ((i 0) (acc ""))
        (cond ((= i n) acc)
              ((= #\$ (string-ref s i))
               (set! i (+ i 1))
               (cond ((= i n) acc)  ; TODO
                     ((= #\{ (string-ref s i))
                      (let inner ((a (+ i 1)) (b (+ i 1)))
                        (cond ((= b n) acc)
                              ((= #\} (string-ref s b))
                               (loop (+ b 1)
                                     (let* ((vname (substring s a b))
                                            (vpair (assoc vname vars)))
                                       (when (member vname visited)
                                         (error "variable expansion loop"))
                                       (if vpair
                                           (let ((value (cdr vpair)))
                                             (string-append
                                              acc (rec value
                                                       (cons vname visited))))
                                           (error (string-append
                                                   "var: " vname))))))
                              (else (inner a (+ b 1))))))
                     (else (loop i acc))))
              (else (loop (+ i 1)
                          (string-append acc (string (string-ref s i))))))))))

(define (parse-pc-file filename)
  (receive (keys vars)
      (parse-lines (list-reader (io.readlines (file filename))))
    (let* ((vars (map (λ (var) (cons (car var) (expand-vars (cdr var) vars)))
                      vars))
           (keys (map (λ (key) (cons (car key) (expand-vars (cdr key) vars)))
                      keys)))
      (values keys vars))))

(define (dump-pc-file filename)
  (newline)
  (writeln filename)
  (newline)
  (receive (keys vars) (parse-pc-file filename)
    (for-each writeln keys)
    (newline)
    (for-each writeln vars)))

;; (for-each dump-pc-file (list-all-pc-files))
(for-each (λ (filename)
            (receive (keys vars) (parse-pc-file filename)
              (displayln filename)
              (newline)
              (for-each (λ (key) (write-simple key) (newline))
                        keys)
              (newline)))
          (list-all-pc-files))
